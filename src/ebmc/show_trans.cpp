/*******************************************************************\

Module: Show Transition Relation in various Formats

Author: Daniel Kroening, kroening@kroening.com

\*******************************************************************/

#include "show_trans.h"

#include <util/cout_message.h>

#include <verilog/expr2verilog.h>

#include "ebmc_base.h"
#include "ebmc_version.h"
#include "output_file.h"
#include "output_verilog.h"

#include <iostream>

/*******************************************************************\

   Class: show_trans

 Purpose:

\*******************************************************************/

class show_transt
{
public:
  explicit show_transt(const transition_systemt &_transition_system)
    : transition_system(_transition_system)
  {
  }

  int show_trans_verilog_rtl(std::ostream &);
  int show_trans_verilog_netlist(std::ostream &);
  int show_trans(std::ostream &);

protected:
  const transition_systemt &transition_system;

  void verilog_header(std::ostream &out, const std::string &desc);
  void
  print_verilog_constraints(const exprt &, const namespacet &, std::ostream &);
};

/*******************************************************************\

Function: show_trans_verilog_netlist

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

int show_trans_verilog_netlist(
  const transition_systemt &transition_system,
  std::ostream &out)
{
  show_transt show_trans(transition_system);
  return show_trans.show_trans_verilog_netlist(out);
}

/*******************************************************************\

Function: show_trans_verilog_rtl

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

int show_trans_verilog_rtl(
  const transition_systemt &transition_system,
  std::ostream &out)
{
  show_transt show_trans(transition_system);
  return show_trans.show_trans_verilog_rtl(out);
}

/*******************************************************************\

Function: show_transt::show_trans_verilog_netlist

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

int show_transt::show_trans_verilog_netlist(std::ostream &out)
{
  console_message_handlert message_handler;

  output_verilog_netlistt output_verilog(
    transition_system.symbol_table, out, message_handler);

  try
  {
    verilog_header(out, "Verilog netlist");
    output_verilog(*transition_system.main_symbol);
  }
  
  catch(const std::string &e)
  {
    output_verilog.error() << e << messaget::eom;
    return 1;
  }
  
  catch(const char *e)
  {
    output_verilog.error() << e << messaget::eom;
    return 1;
  }
  
  catch(int)
  {
    output_verilog.error();
    return 1;
  }

  return 0;
}

/*******************************************************************\

Function: show_transt::show_trans_verilog_rtl

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

int show_transt::show_trans_verilog_rtl(std::ostream &out)
{
  console_message_handlert message_handler;

  output_verilog_rtlt output_verilog(
    transition_system.symbol_table, out, message_handler);

  try
  {
    verilog_header(out, "Verilog RTL");
    output_verilog(*transition_system.main_symbol);
  }
  
  catch(const std::string &e)
  {
    output_verilog.error() << e << messaget::eom;
    return 1;
  }
  
  catch(const char *e)
  {
    output_verilog.error() << e << messaget::eom;
    return 1;
  }
  
  catch(int)
  {
    output_verilog.error();
    return 1;
  }

  return 0;
}

/*******************************************************************\

Function: show_transt::show_trans

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

int show_transt::show_trans(std::ostream &out)
{
  transition_system.output(out);
  return 0;
}

/*******************************************************************\

Function: show_transt::verilog_header

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

void show_transt::verilog_header(
  std::ostream &out,
  const std::string &desc)
{
  out << "// " << desc << " generated by EBMC Version "
      << EBMC_VERSION << '\n';
}

/*******************************************************************\

Function: show_transt::print_verilog_constraints

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

void show_transt::print_verilog_constraints(
  const exprt &expr,
  const namespacet &ns,
  std::ostream &out)
{
  if(expr.id()==ID_and)
  {
    forall_operands(it, expr)
      print_verilog_constraints(*it, ns, out);
    return;
  }

  out << "  " << expr2verilog(expr, ns) << '\n';

  out << '\n';
}

/*******************************************************************\

Function: show_trans

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

int show_trans(const transition_systemt &transition_system, std::ostream &out)
{
  show_transt show_trans(transition_system);
  return show_trans.show_trans(out);
}
